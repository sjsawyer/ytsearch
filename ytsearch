#!/usr/bin/env python

import urllib2, urllib
import re

'''
ytsearch

Search youtube for the given query string and return the top result.

Example usage:
    >>> import ytsearch
    >>> ytsearch.geturl("thrift shop")
    https://www.youtube.com/watch?v=QK8mJJJvaes

Or from the command line:
    $ ./ytsearch thrift shop
    https://www.youtube.com/watch?v=QK8mJJJvaes
'''


def geturl(text_to_search, official_video=True):
    '''
    Return the top search result from youtube for a given query string.

    Parameters
    ----------
    text_to_search: string
        Text to search for related videos on Youtube.
    official_video: boolean (optional)
        Attempt to search for the official video by appending "official video"
        to `text_to_search`.

    Returns: Youtube URL of the top Youtube search result.

    >>> geturl("ariana grande problem")
    https://www.youtube.com/watch?v=iS1g8G_njx8

    '''
    if official_video:
        text_to_search += " official video"
    query_string = urllib.urlencode({"search_query" : text_to_search})
    html_content = urllib2.urlopen("http://www.youtube.com/results?" + query_string)
    search_results = re.findall(r'href=\"\/watch\?v=(.{11})', html_content.read().decode('utf-8'))
    return "http://www.youtube.com/watch?v=" + search_results[0]


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description =
    """
    Return top youtube search result for given query. Appends
    ' official video' to the query by default. To avoid doing this, specify
    the -n flag.

    $ ./ytsearch thrift shop
    https://www.youtube.com/watch?v=QK8mJJJvaes

    $ ./ytsearch -n cats meowing
    https://www.youtube.com/watch?v=DXUAyRRkI6k
    """
    )
    parser.add_argument('query', nargs="+",
                        help="Words to search for. By default, appends ' official video'"
                             " to the query")
    parser.add_argument('-n', dest="official_video", action="store_false",
                        help="Do not append ' official video' to the query")
    args = parser.parse_args()
    text_to_search = " ".join(args.query)
    print geturl(text_to_search, args.official_video)

